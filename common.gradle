import org.w3c.dom.Document
import org.w3c.dom.Element
import org.w3c.dom.NodeList

import javax.xml.parsers.DocumentBuilder
import javax.xml.parsers.DocumentBuilderFactory
import javax.xml.transform.OutputKeys
import javax.xml.transform.TransformerFactory
import javax.xml.transform.dom.DOMSource
import javax.xml.transform.stream.StreamResult

/**
 * 修改assets目录下的xml配置文件版本号
 * @param filePath 文件路径（因为该方法定义在了项目根目录，需要传入绝对路径，相对路径需要转换成绝对路径，
 * 可以使用file('相对路径').absolutePath获取绝对路径）
 * @param channel 渠道，比如WA，WP
 * @param version 版本，比如3.6.4
 * @return null
 */
def modifyAssetsXmlConfigVersion(filePath, channel, version) {
    println("Config file path: " + filePath)
    File configFile = file(filePath)
    if (configFile.exists()) {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance()
        DocumentBuilder builder = factory.newDocumentBuilder()
        // 解析xml文档，得到代表文档的document对象
        Document document = builder.parse(configFile)
        // 根据标签名获取节点列表
        NodeList list = document.getElementsByTagName("version")
        for (int i = 0; i < list.length; i++) {
            Element element = (Element) list.item(i)
            // 修改version节点的val属性值（其实只有一个version节点）
            element.setAttribute("val", channel + version)
        }

        // 保存xml文件
        TransformerFactory transformerFactory = TransformerFactory.newInstance()
        javax.xml.transform.Transformer transformer = transformerFactory.newTransformer()
        DOMSource domSource = new DOMSource(document)
        // 设置编码类型
        transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8")
        transformer.setOutputProperty(OutputKeys.INDENT, "yes")
        StreamResult result = new StreamResult(new FileOutputStream(configFile))
        // 把DOM树转换为xml文件
        transformer.transform(domSource, result)
    }
}


ext {

    // 导出函数，在外部可以调用
    modifyAssetsXmlConfigVersion = this.&modifyAssetsXmlConfigVersion
}